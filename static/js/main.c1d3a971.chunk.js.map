{"version":3,"sources":["scripts/components/Header.js","scripts/components/ArchitecturesList.js","scripts/components/QuestionComponent.js","scripts/components/QuestionChoice.js","scripts/components/Questions.js","scripts/components/ArchitectureLayerBox.js","scripts/components/Diagram.js","scripts/containers/Workspace.js","scripts/utilities/config.js","scripts/utilities/data.js","scripts/containers/App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","id","className","ArchitecturesList","props","onchangeHandler","architecturesList","selectRef","htmlFor","onChange","ref","Object","keys","map","item","value","key","renderArchitecturesList","QuestionComponent","index","question","group","questionCount","data-id","data-group","children","QuestionChoice","onOptionSelectHandler","questionObj","isChecked","type","name","checked","Questions","renderChoices","selectedChoice","split","choice","components_QuestionChoice","_ref","questionsObj","questionResponseMap","isActive","hasOwnProperty","response","components_QuestionComponent","Fragment","renderQuestions","ArchitectureLayerBox","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","entities","elementList","entity","element","nop","push","_this$props","groupData","show","renderEntities","class","Component","Diagram","_this","renderGroupBox","bind","assertThisInitialized","architectureDetails","ArchitectureLayerBox_ArchitectureLayerBox","Workspace","state","render","groupList","groupListPointer","groupQueue","groupQueueHead","activeGroup","entityQueue","entityQueueHead","activeEntity","questionQueue","questionQueueHead","activeQuestion","filterQuestionsPerGroups","groups","_this2","relatedGroupsList","length","forEach","includes","_this3","slice","relatedGroups","setActiveGroup","parentEntityObj","checkForActiveParentEntitiesInOtherGroups","activeParentEntitypresent","parentEntitiesList","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","parentEntity","err","return","parentEntities","checkForActiveParentEntities","console","log","questions","_this4","questionDetails","traversedQuestions","parseInt","addGroupsToQueue","ifGroupQueueHasElements","addEntitiesToQueue","ifEntityQueueHasElements","setActiveEntity","activeEntityQuestions","addQuestionsToQueue","setActiveQuestion","filteredEntities","shouldUpdateActiveGroup","resetEntityQueue","performActiveGroupUpdation","questionId","questionEntityMapping","_this5","groupEntities","entitiesForQuestion","traversedEntities","filter","indexOf","groupId","resetGroupQueue","indexInGroupQueue","_this6","_this7","getEntityQuestions","entityResponseChoice","actualResponse","event","target","closest","getAttribute","nextElementSibling","innerHTML","isQuestionAlreadyAnswered","resetActiveGroups","resetActiveEntitiesForInactiveGroups","resetActiveQuestionsForInactiveGroups","resetQuestionQueue","getActiveEntityForAlreadyAnsweredQuestion","resetActiveEntitiesToRightOfEntityQueueHead","resetActiveEntitiesToLeftOfEntityQueueHead","resetQuestionResponseMap","setQuestionResponseMap","filterEntitiesOnOptionSelect","ifQuestionQueueHasElements","performActiveEntityUpdation","setState","_this$props2","components_Questions","Diagram_Diagram","appModule","appConfig","controllers","getArchitecturesList","getArchitectureDetails","getQuestionDetails","getQuestionEntityMapping","1","2","3","4","5","6","7","8","9","10","11","choices","solutionsList","App","defaultArchitectureId","selectedDropdownNode","React","createRef","architectureId","selectArchitecture","url","current","components_Header","components_ArchitecturesList","Workspace_Workspace","Boolean","window","location","hostname","match","ReactDOM","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c1d3a971.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../../styles/Header.scss';\r\n\r\nconst Header = () =>  {\r\n    return (\r\n        <div id = 'header'>\r\n        <div className = 'custom-row'>\r\n            <h2>Azure solution architectures</h2>\r\n            <p>Architectures to help you design and implement secure, highly-available, performant and resilient solutions on Azure. </p>\r\n        </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nimport '../../styles/ArchitecturesList.scss';\r\n\r\nconst ArchitecturesList = (props) => {\r\n  let {\r\n    onchangeHandler,\r\n    architecturesList,\r\n    selectRef\r\n  } = props;\r\n\r\n  // Render architectures list\r\n  const renderArchitecturesList = (architecturesList) => {\r\n    return Object.keys(architecturesList).map(item =>\r\n      <option \r\n        value = {item} \r\n        key = {item}>{architecturesList[item]}\r\n      </option>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div id = 'architectures-select-box'>\r\n      <label htmlFor = 'architecture-solutions'>Solutions</label> <br/>\r\n      <select \r\n        id = 'architecture-solutions'\r\n        onChange = {onchangeHandler}\r\n        ref = {selectRef}\r\n      >\r\n        {renderArchitecturesList(architecturesList)}\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ArchitecturesList;\r\n","import React from 'react';\r\nconst QuestionComponent = (props) => {\r\n    let {\r\n        index,\r\n        question,\r\n        group,\r\n        questionCount\r\n    } = props;\r\n\r\n    return (\r\n        <div \r\n        className = 'question'\r\n        data-id = {question['id']}\r\n        data-group = {group}\r\n      >\r\n        <span>{questionCount}.</span>\r\n        <span className = 'question-title'>\r\n            {question['question']}\r\n        </span>\r\n        {props.children}\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default QuestionComponent;","import React from 'react';\r\nconst QuestionChoice = (props) => {\r\n    let {\r\n        onOptionSelectHandler,\r\n        questionObj,\r\n        questionCount,\r\n        index,\r\n        isChecked\r\n    } = props;\r\n\r\n    return (\r\n        <div \r\n        className = 'option'\r\n        key = {questionObj.id + index}\r\n      >\r\n        <input \r\n          type = 'radio'\r\n          id = {questionObj.id + index}\r\n          name = {questionCount}\r\n          onChange = {onOptionSelectHandler}\r\n          checked = {isChecked}\r\n        />\r\n        <label \r\n          htmlFor={questionObj.id + index}\r\n          className='pointer'\r\n        >\r\n            {props.children}\r\n        </label>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default QuestionChoice;","import React from 'react';\r\nimport QuestionComponent from './QuestionComponent';\r\nimport QuestionChoice from './QuestionChoice';\r\nconst Questions = (props) => {\r\n\r\n  // Render active questions\r\n  const renderQuestions = ({questionsObj, onOptionSelectHandler, questionResponseMap}) => {\r\n    let questionCount = 0;\r\n    return Object.keys(questionsObj).map(group => \r\n      questionsObj[group].map((question, index) => {\r\n        if(question.isActive) {\r\n          questionCount = questionCount + 1;\r\n          let isAnswered = questionResponseMap.hasOwnProperty(question.id)\r\n          let selectedChoice = isAnswered ? questionResponseMap[question.id].response : '';\r\n          return (\r\n            <QuestionComponent \r\n              key = {index}\r\n              question = {question} \r\n              index = {index} \r\n              group = {group}\r\n              questionCount = {questionCount}\r\n            >\r\n              {renderChoices(question, questionCount, selectedChoice, onOptionSelectHandler)}\r\n            </QuestionComponent>\r\n          )\r\n        } else {\r\n          return (<></>);\r\n        }\r\n      }\r\n    ))\r\n  }\r\n\r\n  // Render respective choices for a\r\n  const renderChoices = (questionObj, questionCount, selectedChoice, onOptionSelectHandler) => {\r\n    return questionObj['choices'].split('|').map((choice, index) => {\r\n      let isChecked = selectedChoice === choice ? true : false; \r\n      return (\r\n        <QuestionChoice \r\n          onOptionSelectHandler = {onOptionSelectHandler}\r\n          questionObj = {questionObj}\r\n          questionCount = {questionCount}\r\n          index = {index}\r\n          key = {index}\r\n          isChecked = {isChecked}\r\n        >\r\n          {choice}\r\n        </QuestionChoice>\r\n    )})\r\n  }\r\n\r\n    return (\r\n      <div id='questions-container'>\r\n        {renderQuestions(props)}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Questions;","import React, { Component } from 'react';\r\nimport '../../styles/ArchitectureLayerBox.scss';\r\n\r\nexport default class ArchitectureLayerBox extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  renderEntities(entities) {\r\n    let elementList = [];\r\n    for(let entity in entities) {\r\n        let element = (\r\n            <div \r\n                key = {entity}\r\n                className={entities[entity].isActive ? 'show' : 'hide'}nop\r\n            >\r\n                {entities[entity].name}\r\n            </div>\r\n        )\r\n        elementList.push(element);\r\n    }\r\n    return elementList;\r\n  }\r\n\r\n  render() {\r\n      let {\r\n          groupData,\r\n          show\r\n      } = this.props;\r\n    return (\r\n        <div className = {show ? 'show outer-box': 'hide outer-box'}>\r\n            <div className = 'inner-box'>    \r\n                {this.renderEntities(groupData.entities)}\r\n            </div>\r\n            <span class=\"arrow\">-----&gt;</span>\r\n        </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport ArchitectureLayerBox from './ArchitectureLayerBox';\r\n\r\nexport default class Diagram extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.renderGroupBox = this.renderGroupBox.bind(this);\r\n  }\r\n\r\n  renderGroupBox(architectureDetails) {\r\n    let element = []\r\n    for(let group in architectureDetails) {\r\n      element.push(      \r\n        <ArchitectureLayerBox\r\n        key = {group}\r\n        groupData = {architectureDetails[group]}\r\n        show = {architectureDetails[group].isActive}\r\n        />\r\n      )\r\n    }\r\n    return element;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id = 'diagram-container'>\r\n        <div id = 'diagram-wrapper'>\r\n          {this.renderGroupBox(this.props.architectureDetails)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\nimport Questions from '../components/Questions';\r\nimport Diagram from '../components/Diagram';\r\n\r\nimport '../../styles/Workspace.scss';\r\n\r\nexport default class Workspace extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            render: true\r\n        }\r\n\r\n        this.groupList = Object.keys(this.props.architectureDetails);\r\n        this.groupListPointer = 1;\r\n\r\n        this.groupQueue = [this.groupList[0]];\r\n        this.groupQueueHead = 0;\r\n        this.activeGroup = this.groupList[0];\r\n        \r\n        this.entityQueue = [];\r\n        this.entityQueueHead = 0;\r\n        this.activeEntity = '';\r\n\r\n        this.questionQueue = [];\r\n        this.questionQueueHead = 0;\r\n        this.activeQuestion = '';\r\n\r\n        this.questionResponseMap = {}\r\n\r\n        // Binding context to methods\r\n        this.filterQuestionsPerGroups = this.filterQuestionsPerGroups.bind(this);\r\n        this.onOptionSelectHandler = this.onOptionSelectHandler.bind(this);\r\n    }\r\n\r\n    // Add related groups to group queue\r\n    addGroupsToQueue(groups) {\r\n        let relatedGroupsList = Object.keys(groups);\r\n\r\n        // If related groups are present then add to the queue\r\n        // Else add the next group as per architecture\r\n        // Check if they are already present\r\n        if(relatedGroupsList.length > 0)  {\r\n            relatedGroupsList.forEach((group)=> {\r\n                !this.groupQueue.includes(group) && this.groupQueue.push(group);\r\n            })\r\n        }\r\n    }\r\n\r\n    // Set isActive flag for a group\r\n    setActiveGroup(architectureDetails) {\r\n        this.activeGroup = this.groupQueue[this.groupQueueHead]\r\n        architectureDetails[this.activeGroup].isActive = true;\r\n        this.groupQueueHead += 1;\r\n    }\r\n\r\n    // Reset group queue\r\n    resetGroupQueue(index) {\r\n        let architectureDetails = this.props.architectureDetails;\r\n        this.groupQueue = this.groupQueue.slice(0, index + 1);\r\n        this.groupQueueHead = index;\r\n\r\n        // Traverse the queue to check if the parent group is present\r\n        // As siblings need to be added in the group queue\r\n        for(let index = this.groupQueueHead-1; index >= 0;index--) {\r\n            let groupId = this.groupQueue[index];\r\n            let relatedGroups = architectureDetails[groupId].relatedGroups;\r\n            if(relatedGroups.hasOwnProperty(this.groupQueue[this.groupQueueHead])) {\r\n                Object.keys(relatedGroups).forEach((group)=> {\r\n                    (!this.groupQueue.includes(group)) && this.groupQueue.push(group);\r\n                })\r\n            }\r\n            break;\r\n        }\r\n        this.setActiveGroup(this.props.architectureDetails)\r\n    }\r\n\r\n    // Check if any parent entity in any of the parent groups is active\r\n    checkForActiveParentEntities(parentEntityObj, architectureDetails) {\r\n        let checkForActiveParentEntitiesInOtherGroups = true;\r\n        let activeParentEntitypresent = false;\r\n        for(let group in parentEntityObj) {\r\n            let parentEntitiesList = parentEntityObj[group];\r\n            for(let parentEntity of parentEntitiesList) {\r\n                if(architectureDetails[group].entities[parentEntity].isActive) {\r\n                    checkForActiveParentEntitiesInOtherGroups = false;\r\n                    activeParentEntitypresent = true;\r\n                    break;\r\n                }\r\n            }\r\n            if(!checkForActiveParentEntitiesInOtherGroups) {\r\n                break;\r\n            }\r\n        }\r\n        return activeParentEntitypresent;\r\n    }\r\n\r\n    // Add entities to group queue\r\n    addEntitiesToQueue(entities) {\r\n        // Add to the queue only if parent entities are present\r\n        for(let entity in entities) {\r\n            let parentEntityObj = entities[entity].parentEntities;\r\n            if(Object.keys(parentEntityObj).length > 0) {\r\n                this.checkForActiveParentEntities(parentEntityObj, this.props.architectureDetails) && this.entityQueue.push(entity);\r\n            } else {\r\n                this.entityQueue.push(entity);   \r\n            }\r\n        }\r\n        console.log(this.entityQueue);   \r\n    }\r\n\r\n    // Set isActive flag for entities\r\n    setActiveEntity() {\r\n        this.activeEntity = this.entityQueue[this.entityQueueHead];\r\n        this.entityQueueHead += 1;\r\n    }\r\n\r\n    // Reset entity queue\r\n    resetEntityQueue() {\r\n        this.entityQueue = [];\r\n        this.entityQueueHead = 0;\r\n        this.activeEntity = '';\r\n    }\r\n\r\n    // Add questions to the queue\r\n    addQuestionsToQueue(questions) {\r\n        questions.forEach((question) => {\r\n            if(!(this.questionQueue.includes(question))) {\r\n                this.questionQueue.push(question);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Set isActive flag for a group\r\n    setActiveQuestion() {\r\n        this.activeQuestion = this.questionQueue[this.questionQueueHead];\r\n        this.questionQueueHead = this.questionQueueHead + 1;\r\n    }\r\n\r\n    // Get groups with questions to be rendered\r\n    filterQuestionsPerGroups(activeGroup, activeQuestion, questionDetails) {\r\n        let traversedQuestions = this.questionQueue.slice(0, this.questionQueueHead);\r\n        questionDetails[activeGroup].forEach((questionObj) => {\r\n            questionObj.isActive = traversedQuestions.includes(parseInt(questionObj.id)) \r\n        }, this);\r\n    }\r\n\r\n    // Reset question queue\r\n    resetQuestionQueue(index) {\r\n        this.questionQueue = this.questionQueue.slice(0, index + 1);\r\n        this.questionQueueHead = index;\r\n        console.log('questionQueue: ', this.questionQueue)\r\n    }\r\n    \r\n\r\n    // Check whether entity queue has exhaused\r\n    ifGroupQueueHasElements() {\r\n        return this.groupQueue.length > this.groupQueueHead;\r\n    }\r\n\r\n    // Check whether entity queue has exhaused\r\n    ifEntityQueueHasElements() {\r\n        return this.entityQueue.length > this.entityQueueHead;\r\n    }\r\n\r\n    // Check whether entity queue has exhaused\r\n    ifQuestionQueueHasElements() {\r\n        return this.questionQueue.length > this.questionQueueHead;\r\n    }\r\n\r\n    performActiveGroupUpdation(architectureDetails, questionDetails) {\r\n        this.addGroupsToQueue(architectureDetails[this.activeGroup].relatedGroups);\r\n        if(this.ifGroupQueueHasElements()) {\r\n            this.setActiveGroup(architectureDetails);\r\n            this.addEntitiesToQueue(architectureDetails[this.activeGroup].entities);\r\n            while(this.ifEntityQueueHasElements()) {\r\n                this.setActiveEntity(architectureDetails[this.activeGroup].entities);\r\n                let activeEntityQuestions = architectureDetails[this.activeGroup].entities[this.activeEntity].questions;\r\n                if(activeEntityQuestions.length > 0) {\r\n                    this.addQuestionsToQueue(activeEntityQuestions);\r\n                    this.setActiveQuestion();\r\n                    this.filterQuestionsPerGroups(this.activeGroup, this.activeQuestion, questionDetails);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    performActiveEntityUpdation(architectureDetails, questionDetails, filteredEntities) {\r\n        let shouldUpdateActiveGroup = true;\r\n        while(this.ifEntityQueueHasElements()) {\r\n            this.setActiveEntity(architectureDetails[this.activeGroup].entities);\r\n            let activeEntityQuestions = architectureDetails[this.activeGroup].entities[this.activeEntity].questions;\r\n            if(filteredEntities.includes(this.activeEntity) && activeEntityQuestions.length > 0) {\r\n                shouldUpdateActiveGroup = false;\r\n                this.addQuestionsToQueue(activeEntityQuestions);\r\n                this.setActiveQuestion();\r\n                this.filterQuestionsPerGroups(this.activeGroup, this.activeQuestion, questionDetails);\r\n                break;\r\n            }\r\n        }\r\n\r\n        if(shouldUpdateActiveGroup) {\r\n            this.resetEntityQueue();\r\n            this.performActiveGroupUpdation(architectureDetails, questionDetails);\r\n        }\r\n    }\r\n\r\n    // Get the filtered entities as per current option select\r\n    filterEntitiesOnOptionSelect(questionId, choice, questionEntityMapping, entities) {\r\n        let filteredEntities = [];\r\n        let groupEntities = Object.keys(entities);\r\n        let entitiesForQuestion = questionEntityMapping[questionId];\r\n        let traversedEntities = this.entityQueue.slice(0, this.entityQueueHead - 1);\r\n        for(let entity in entitiesForQuestion) {\r\n            if(entitiesForQuestion[entity].split('|').includes(choice)) {\r\n                filteredEntities.push(entity);\r\n            }\r\n        }\r\n\r\n        // If no entities match the current choice, then remove those entities from filtered list\r\n        if(filteredEntities.length === 0) {\r\n            filteredEntities = groupEntities.filter((entity) => {\r\n                return Object.keys(entitiesForQuestion).indexOf(entity) === -1;\r\n            })\r\n        }\r\n\r\n        // Remove entities which were already filtered in previous pass\r\n        // Also remove those which are not present in entity queue \r\n        // As their parent entities were inactive \r\n        filteredEntities = filteredEntities.filter((entity) => {\r\n            if(traversedEntities.includes(entity)) {\r\n                return entities[entity].isActive;\r\n            } else {\r\n                return this.entityQueue.includes(entity);\r\n            }\r\n        })\r\n\r\n\r\n        // Set isActive true for filtered entities in architectureDetails object\r\n        for(let entity in entities) {\r\n            entities[entity].isActive = filteredEntities.includes(entity);\r\n        }\r\n        \r\n        console.log('filtered: ', filteredEntities);\r\n        return filteredEntities;\r\n    }\r\n\r\n    // Check whether the question has already been answered\r\n    isQuestionAlreadyAnswered(questionId) {\r\n        return this.questionResponseMap.hasOwnProperty(questionId);\r\n    }\r\n\r\n    // Set question response map\r\n    setQuestionResponseMap(questionId, entity, choice) {\r\n        this.questionResponseMap[questionId] = {\r\n            'entity': entity,\r\n            'response': choice\r\n        };    \r\n    }\r\n\r\n    // Reset isActive flag for groups in architecture details object\r\n    resetActiveGroups(groupId, architectureDetails) {\r\n        this.resetGroupQueue(this.groupQueue.indexOf(groupId));\r\n        for(let group in architectureDetails) {\r\n            let indexInGroupQueue = this.groupQueue.indexOf(group);\r\n            architectureDetails[group].isActive = this.groupQueue.includes(group) && indexInGroupQueue < this.groupQueueHead;\r\n        }\r\n    }\r\n\r\n    // Reset isActive flag for entities in groups which are inactive\r\n    resetActiveEntitiesForInactiveGroups(architectureDetails) {\r\n        Object.keys(architectureDetails).forEach((group) => {\r\n            if(!architectureDetails[group].isActive) {\r\n                for(let entity in architectureDetails[group].entities) {\r\n                    architectureDetails[group].entities[entity].isActive = false;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    \r\n    // Reset isActive flag for questions in the groups which are inactive\r\n    resetActiveQuestionsForInactiveGroups(questionDetails, architectureDetails) {\r\n        Object.keys(questionDetails).forEach((group) => {\r\n            if(!architectureDetails[group].isActive) {\r\n                questionDetails[group].forEach((question) => {\r\n                    question.isActive = false;\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    getActiveEntityForAlreadyAnsweredQuestion(questionId) {\r\n        return this.questionResponseMap[questionId].entity\r\n    }\r\n\r\n    // Reset isActive flag to false for entities to right of current entity in queue\r\n    resetActiveEntitiesToRightOfEntityQueueHead(entities) {\r\n        this.entityQueue.forEach((entity, index) => {\r\n            if(index >= this.entityQueueHead) {\r\n                entities[entity].isActive = false;\r\n            }\r\n        })\r\n    }\r\n\r\n    // Reset isActive flag for entities to the left of current active entity \r\n    // If they are already filtered in previous passes\r\n    resetActiveEntitiesToLeftOfEntityQueueHead(group, questionEntityMapping) {\r\n        let entities = group.entities;\r\n        this.entityQueue.forEach((entity, index) => {\r\n            if(index < this.entityQueueHead-1) {\r\n                let entityQuestions = this.getEntityQuestions(entities[entity]);\r\n                entityQuestions.forEach((questionId) => {\r\n                    if(this.questionQueue.includes(questionId)) {\r\n                        let entityResponseChoice = questionEntityMapping[questionId][entity];\r\n                        let actualResponse = this.questionResponseMap[questionId].response;\r\n                        entities[entity].isActive = (entityResponseChoice === actualResponse)\r\n                    } else {\r\n                        entities[entity].isActive = false;\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    resetQuestionResponseMap() {\r\n        for(let questionId in this.questionResponseMap) {\r\n            !this.questionQueue.includes(parseInt(questionId)) && (delete this.questionResponseMap[questionId]);\r\n        }\r\n    }\r\n\r\n    getEntityQuestions(entity) {\r\n        return entity.questions;\r\n    }\r\n\r\n    // Handler for option select\r\n    onOptionSelectHandler(event) {\r\n        let {\r\n            architectureDetails,\r\n            questionDetails,\r\n            questionEntityMapping\r\n        } = this.props;\r\n\r\n        // Get the groupId, questionId and choice for the selected question\r\n        let groupId = event.target.closest('.question').getAttribute('data-group');\r\n        let questionId = event.target.closest('.question').getAttribute('data-id');\r\n        let choice = event.target.nextElementSibling.innerHTML;\r\n\r\n        if(this.isQuestionAlreadyAnswered(questionId)) {\r\n            this.resetActiveGroups(groupId, architectureDetails);\r\n            this.resetActiveEntitiesForInactiveGroups(architectureDetails);\r\n            this.resetActiveQuestionsForInactiveGroups(questionDetails, architectureDetails);\r\n            this.resetEntityQueue();\r\n            this.resetQuestionQueue(this.questionQueue.indexOf(parseInt(questionId)));\r\n            this.addEntitiesToQueue(architectureDetails[this.activeGroup].entities);\r\n            this.entityQueueHead = this.entityQueue.indexOf(this.getActiveEntityForAlreadyAnsweredQuestion(questionId));\r\n            this.setActiveEntity();\r\n            let activeEntityQuestions = architectureDetails[this.activeGroup].entities[this.activeEntity].questions;\r\n            this.addQuestionsToQueue(activeEntityQuestions);\r\n            this.setActiveQuestion();\r\n            this.filterQuestionsPerGroups(this.activeGroup, this.activeQuestion, questionDetails);\r\n            this.resetActiveEntitiesToRightOfEntityQueueHead(architectureDetails[groupId].entities);\r\n            this.resetActiveEntitiesToLeftOfEntityQueueHead(architectureDetails[groupId], questionEntityMapping);\r\n            this.resetQuestionResponseMap();\r\n        } \r\n\r\n        // Set the response for currently answered question;\r\n        this.setQuestionResponseMap(questionId, this.activeEntity, choice);\r\n\r\n        // Get the filtered entities corresponding to the choice selected\r\n        let filteredEntities = this.filterEntitiesOnOptionSelect(questionId, choice, questionEntityMapping, architectureDetails[groupId].entities);\r\n  \r\n        // If active entity is among the filtered entities\r\n        // Render the next question\r\n        // If question queue has ended or active entity not in filtered entities\r\n        // Then for each entity in entity queue, set that entity as active entity\r\n        // Check if that entity is part of filtered entities\r\n        // If yes, then check whether that entity have any questions associated with it\r\n        // If yes, then repeat from addQuestionsToQueue and break the loop\r\n        // If no, then continue the loop until entity queue has exhausted\r\n        // Change the active group if end of entity queue\r\n\r\n        if(filteredEntities.includes(this.activeEntity)) {\r\n            if(this.ifQuestionQueueHasElements()) {\r\n                this.setActiveQuestion();\r\n                this.filterQuestionsPerGroups(this.activeGroup, this.activeQuestion, questionDetails); \r\n            } else {\r\n                this.performActiveEntityUpdation(architectureDetails, questionDetails, filteredEntities);\r\n            }\r\n        } else {\r\n            this.performActiveEntityUpdation(architectureDetails, questionDetails, filteredEntities);\r\n        }\r\n\r\n        this.setState(() => ({\r\n            render: true\r\n        }));    \r\n    }\r\n\r\n    componentWillMount() {\r\n        let {\r\n            architectureDetails,\r\n            questionDetails\r\n        } = this.props;\r\n\r\n        let activeGroup = this.activeGroup;\r\n        this.addGroupsToQueue(architectureDetails[activeGroup].relatedGroups);\r\n        this.setActiveGroup(architectureDetails);\r\n        this.addEntitiesToQueue(architectureDetails[activeGroup].entities);\r\n        this.setActiveEntity(architectureDetails[activeGroup].entities);\r\n        this.addQuestionsToQueue(architectureDetails[activeGroup].entities[this.activeEntity].questions);\r\n        this.setActiveQuestion();\r\n        this.filterQuestionsPerGroups(activeGroup, this.activeQuestion, questionDetails);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id = 'workspace'>\r\n                <Questions \r\n                    questionsObj = {this.props.questionDetails}\r\n                    onOptionSelectHandler = {this.onOptionSelectHandler}\r\n                    questionResponseMap = {this.questionResponseMap}\r\n                />\r\n                <Diagram\r\n                    architectureDetails = {this.props.architectureDetails}\r\n                />  \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","const appModule = (() => {\r\n    let appConfig = {};\r\n    appConfig.controllers = {};\r\n    appConfig.url = 'http://localhost:3003/';\r\n    appConfig.controllers.getArchitecturesList = 'GetArchitecturesList';\r\n    appConfig.controllers.getArchitectureDetails = 'GetArchitectureDetails';\r\n    appConfig.controllers.getQuestionDetails = 'GetQuestionDetails';\r\n    appConfig.controllers.getQuestionEntityMapping = 'GetQuestionEntityMapping'\r\n    return {\r\n        appConfig\r\n    }\r\n})();\r\n\r\nexport default appModule;","const architectureDetails = {\r\n    '1' : {\r\n        \"name\": \"architecture 1\",\r\n        \"groups\": {\r\n          \"1\": {\r\n            \"name\": \"group 1\",\r\n            \"isActive\": false,\r\n            \"relatedGroups\": {\r\n              \"2\": \"con1\",\r\n              \"3\": \"con2\"\r\n            },\r\n            \"entities\": {\r\n              \"1\": {\r\n                \"name\": \"entity1\",\r\n                \"isActive\": false,\r\n                \"parentEntities\": {},\r\n                \"questions\": [\r\n                  1\r\n                ]\r\n              },\r\n              \"2\": {\r\n                \"name\": \"entity2\",\r\n                \"isActive\": false,\r\n                \"parentEntities\": {},\r\n                \"questions\": [\r\n                  2\r\n                ]\r\n              }\r\n            }\r\n          },\r\n          \"2\": {\r\n            \"name\": \"group 2\",\r\n            \"isActive\": false,\r\n            \"relatedGroups\": {},\r\n            \"entities\": {\r\n              \"3\": {\r\n                \"name\": \"entity3\",\r\n                \"isActive\": false,\r\n                \"parentEntities\": {\r\n                    \"1\": [\"1\"] \r\n                },\r\n                \"questions\": [\r\n                  3\r\n                ]\r\n              },\r\n              \"4\": {\r\n                \"name\": \"entity4\",\r\n                \"isActive\": false,\r\n                \"parentEntities\": {\r\n                    \"1\": [\"2\"]   \r\n                },\r\n                \"questions\": [\r\n                  4\r\n                ]\r\n              }\r\n            }\r\n          },\r\n          \"3\": {\r\n            \"name\": \"group 3\",\r\n            \"isActive\": false,\r\n            \"relatedGroups\": {\r\n              \"4\": null\r\n            },\r\n            \"entities\": {\r\n              \"5\": {\r\n                \"name\": \"entity5\",\r\n                \"isActive\": false,\r\n                \"parentEntities\": {\r\n                    \"1\": [\"1\"]\r\n                },\r\n                \"questions\": [\r\n                  5\r\n                ]\r\n              },\r\n              \"6\": {\r\n                \"name\": \"entity6\",\r\n                \"isActive\": false,\r\n                \"parentEntities\": {\r\n                    \"1\": [\"2\"]   \r\n                },\r\n                \"questions\": [\r\n                  6\r\n                ]\r\n              }\r\n            }\r\n          },\r\n          \"4\": {\r\n            \"name\": \"group 4\",\r\n            \"isActive\": false,\r\n            \"relatedGroups\": {\r\n              \"5\": null\r\n            },\r\n            \"entities\": {\r\n              \"7\": {\r\n                \"name\": \"entity7\",\r\n                \"isActive\": false,\r\n                \"parentEntities\": {\r\n                    \"3\": [\"5\"]   \r\n                },\r\n                \"questions\": [\r\n                  7\r\n                ]\r\n              },\r\n              \"8\": {\r\n                \"name\": \"entity8\",\r\n                \"isActive\": false,\r\n                \"parentEntities\": {\r\n                    \"3\": [\"5\",\"6\"]   \r\n                },\r\n                \"questions\": [\r\n                  8\r\n                ]\r\n              }\r\n            }\r\n          },\r\n          \"5\": {\r\n            \"name\": \"group 5\",\r\n            \"isActive\": false,\r\n            \"relatedGroups\": {},\r\n            \"entities\": {\r\n              \"9\": {\r\n                \"name\": \"entity9\",\r\n                \"isActive\": false,\r\n                \"parentEntities\": {\r\n                    \"4\": [\"7\"]   \r\n                },\r\n                \"questions\": [\r\n                  9\r\n                ]\r\n              },\r\n              \"10\": {\r\n                \"name\": \"entity10\",\r\n                \"isActive\": false,\r\n                \"parentEntities\": {\r\n                    \"4\": [\"8\"]   \r\n                },\r\n                \"questions\": [\r\n                  10\r\n                ]\r\n              },\r\n              \"11\": {\r\n                \"name\": \"entity11\",\r\n                \"isActive\": false,\r\n                \"parentEntities\": {\r\n                    \"4\": [\"7\",\"8\"]   \r\n                },\r\n                \"questions\": [\r\n                  10,\r\n                  11\r\n                ]\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n}\r\n\r\nconst questionDetails = {\r\n    '1': {\r\n        \"groups\": {\r\n          \"1\": [\r\n            {\r\n              \"id\": \"1\",\r\n              \"question\": \"Do you need entity1 in your architecture solution?\",\r\n              \"choices\": \"yes|no\",\r\n              \"isActive\": false\r\n            },\r\n            {\r\n              \"id\": \"2\",\r\n              \"question\": \"Do you need entity2 in your architecture solution?\",\r\n              \"choices\": \"yes|no\",\r\n              \"isActive\": false\r\n            }\r\n          ],\r\n          \"2\": [\r\n            {\r\n              \"id\": \"3\",\r\n              \"question\": \"Do you need entity3 in your architecture solution ?\",\r\n              \"choices\": \"yes|no\",\r\n              \"isActive\": false\r\n            },\r\n            {\r\n              \"id\": \"4\",\r\n              \"question\": \"Do you need entity4 in your architecture solution ?\",\r\n              \"choices\": \"yes|no\",\r\n              \"isActive\": false\r\n            }\r\n          ],\r\n          \"3\": [\r\n            {\r\n              \"id\": \"5\",\r\n              \"question\": \"Do you need entity5 in your architecture solution ?\",\r\n              \"choices\": \"yes|no\",\r\n              \"isActive\": false\r\n            },\r\n            {\r\n              \"id\": \"6\",\r\n              \"question\": \"Do you need entity6 in your architecture solution ?\",\r\n              \"choices\": \"yes|no\",\r\n              \"isActive\": false\r\n            }\r\n          ],\r\n          \"4\": [\r\n            {\r\n              \"id\": \"7\",\r\n              \"question\": \"Do you need entity7 in your architecture solution ?\",\r\n              \"choices\": \"yes|no\",\r\n              \"isActive\": false\r\n            },\r\n            {\r\n              \"id\": \"8\",\r\n              \"question\": \"Do you need entity8 in your architecture solution ?\",\r\n              \"choices\": \"yes|no\",\r\n              \"isActive\": false\r\n            }\r\n          ],\r\n          \"5\": [\r\n            {\r\n              \"id\": \"9\",\r\n              \"question\": \"Do you need entity9 in your architecture solution ?\",\r\n              \"choices\": \"yes|no\",\r\n              \"isActive\": false\r\n            },\r\n            {\r\n              \"id\": \"10\",\r\n              \"question\": \"Do you need entity10 or  entity 11 in your architecture solution ?\",\r\n              \"choices\": \"yes|no\",\r\n              \"isActive\": false\r\n            },\r\n            {\r\n              \"id\": \"11\",\r\n              \"question\": \"Do you need entity11 in your architecture solution ?\",\r\n              \"choices\": \"yes|no\",\r\n              \"isActive\": false\r\n            }\r\n          ]\r\n        }\r\n      }\r\n}\r\n\r\nconst questionEntityMapping = {\r\n    \"1\": {\r\n      \"1\": \"yes\"\r\n    },\r\n    \"2\": {\r\n      \"2\": \"yes\"\r\n    },\r\n    \"3\": {\r\n      \"3\": \"yes\"\r\n    },\r\n    \"4\": {\r\n      \"4\": \"yes\"\r\n    },\r\n    \"5\": {\r\n      \"5\": \"yes\"\r\n    },\r\n    \"6\": {\r\n      \"6\": \"yes\"\r\n    },\r\n    \"7\": {\r\n      \"7\": \"yes\"\r\n    },\r\n    \"8\": {\r\n      \"8\": \"yes\"\r\n    },\r\n    \"9\": {\r\n      \"9\": \"yes\"\r\n    },\r\n    \"10\": {\r\n      \"10\": \"yes\",\r\n      \"11\": \"no\"\r\n    },\r\n    \"11\": {\r\n      \"11\": \"yes\"\r\n    }\r\n  }\r\n\r\n\r\nconst solutionsList = {\r\n    \"1\":\"architecture 1\"\r\n}\r\n\r\nexport {\r\n    architectureDetails,\r\n    solutionsList,\r\n    questionEntityMapping,\r\n    questionDetails\r\n}","import React, { Component } from 'react';\r\nimport Header from '../components/Header';\r\nimport ArchitecturesList from '../components/ArchitecturesList'\r\nimport Workspace from './Workspace';\r\nimport appModule from '../utilities/config';\r\nimport serviceModule from '../utilities/serviceCalls';\r\nimport {    architectureDetails,\r\n  solutionsList,\r\n  questionEntityMapping,\r\n  questionDetails} from '../utilities/data';\r\n\r\nimport '../../styles/App.scss';\r\n\r\nexport default class App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.defaultArchitectureId = 1;\r\n    this.architecturesList = {};\r\n    this.architectureDetails = {};\r\n    this.questionDetails = {};\r\n    this.questionEntityMapping = {};\r\n\r\n    // Creating a Ref\r\n    this.selectedDropdownNode = React.createRef();\r\n\r\n    // Setting initial state\r\n    this.state = {\r\n      architectureId: 0\r\n    }\r\n\r\n    // Binding context to methods\r\n    this.selectArchitecture = this.selectArchitecture.bind(this);\r\n  }\r\n\r\n  // Fetch list of architectures and details for a default architecture\r\n  async componentDidMount() {\r\n    let {\r\n      url,\r\n      controllers\r\n    } = appModule.appConfig;\r\n\r\n    let {\r\n      getArchitecturesList,\r\n      getArchitectureDetails,\r\n      getQuestionDetails,\r\n      getQuestionEntityMapping\r\n    } = controllers;\r\n\r\n    // // Fetch architectures List\r\n    // this.architecturesList = await serviceModule.fetchData(`${url}${getArchitecturesList}`);\r\n\r\n    // // Fetch architecture details for a default architecture\r\n    // this.architectureDetails[this.defaultArchitectureId] = await serviceModule.fetchData(`${url}${getArchitectureDetails}/${this.defaultArchitectureId}`);\r\n\r\n    // // Fetch question details for a default architecture\r\n    // this.questionDetails[this.defaultArchitectureId] = await serviceModule.fetchData(`${url}${getQuestionDetails}/${this.defaultArchitectureId}`);\r\n\r\n    // // Fetch question details for a default architecture\r\n    // this.questionEntityMapping = await serviceModule.fetchData(`${url}${getQuestionEntityMapping}`);\r\n\r\n    this.architecturesList = solutionsList;\r\n    this.architectureDetails = architectureDetails;\r\n    this.questionDetails = questionDetails;\r\n    this.questionEntityMapping = questionEntityMapping;\r\n    \r\n    this.setState(() => ({\r\n        architectureId: 1\r\n      }))\r\n  }\r\n\r\n  selectArchitecture() {\r\n    let selectedNode = this.selectedDropdownNode.current.value;\r\n    // Get data for selected architecture\r\n    this.setState(() => ({\r\n      architectureId: 1\r\n    }))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Header />\r\n        {\r\n          this.state.architectureId !== 0 ?                                            \r\n                                            (\r\n                                            <>\r\n                                              <ArchitecturesList\r\n                                                architecturesList = {this.architecturesList}\r\n                                                onchangeHandler = {this.selectArchitecture}\r\n                                                selectRef = {this.selectedDropdownNode}\r\n                                              />\r\n                                              <Workspace \r\n                                                architectureDetails = {this.architectureDetails[this.state.architectureId].groups} \r\n                                                questionDetails = {this.questionDetails[this.state.architectureId].groups}\r\n                                                questionEntityMapping = {this.questionEntityMapping}\r\n                                              />\r\n                                            </>\r\n                                            )\r\n                                          : ''\r\n        }\r\n      </>\r\n    );\r\n  }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './scripts/containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}